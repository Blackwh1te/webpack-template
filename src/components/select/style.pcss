@import "../../styles/mixins.pcss";

.select {
  --width: 300px;
  --height: 44px;
  --paddingX: 12px;
  --fontSize: 14px;
  --textColor: var(--c-dark);
  --bgColor: var(--c-accent-2);
  --border: var(--borderWidth) var(--borderStyle) var(--borderColor);
  --borderWidth: 2px;
  --borderStyle: solid;
  --borderColor: var(--c-main);
  --borderRadius: var(--border-radius-2);

  --iconSize: 1em;
  --iconOffsetX: 1em;
  --iconColor: var(--c-dark);

  --dropdownOffsetY: 6px;
  --dropdownMaxHeight: 200px;
  --dropdownBorder: var(--dropdownBorderWidth) var(--dropdownBorderStyle) var(--dropdownBorderColor);
  --dropdownBorderWidth: 2px;
  --dropdownBorderStyle: solid;
  --dropdownBorderColor: var(--c-main);
  --dropdownBorderRadius: var(--border-radius-2);
  --dropdownShadow: var(--box-shadow);

  --optionHeight: 40px;
  --optionPaddingX: var(--paddingX);
  --optionFontSize: 14px;
  --optionTextColor: var(--c-dark);
  --optionBgColor: var(--c-light);
  --optionHoverTextColor: var(--c-main);
  --optionHoverBgColor: var(--c-gray-3);
  --optionSelectedTextColor: var(--c-light);
  --optionSelectedBgColor: var(--c-main);

  --searchTextColor: var(--c-dark);
  --searchPlaceholderColor: var(--c-gray);
  --clearButtonSize: 1em;
  --clearButtonColor: var(--c-dark);
  --clearButtonHoverColor: var(--c-main);

  --hoverTextColor: var(--c-light);
  --hoverBgColor: var(--c-main);
  --hoverBorderColor: var(--c-main);
  --hoverIconColor: var(--c-light);

  position: relative;

  && {
    display: inline-flex;
  }

  &__control {
    @mixin abs-cover;

    z-index: calc(var(--layerControls) + 1);
    opacity: 0;

    html:not(.is-mobile-device) & {
      @mixin visually-hidden;
    }

    &:focus {
      & ~ .select__body .select__toggle-button {
        outline: var(--focusOutline);
        outline-offset: 2px;
      }
    }
  }

  &__body {
    position: relative;
  }

  &__toggle-button,
  &__search-input {
    font-size: var(--fontSize);
    background-color: var(--bgColor);
    border: var(--border);
    border-radius: var(--borderRadius);
  }

  &__toggle-button {
    @mixin transition color var(--base-transition-duration), background-color var(--base-transition-duration), border-color var(--base-transition-duration);

    display: flex;
    justify-content: space-between;
    align-items: center;
    column-gap: var(--iconOffsetX);
    min-width: var(--width);
    height: var(--height);
    padding-inline: var(--paddingX);
    color: var(--textColor);
    cursor: pointer;
    user-select: none;

    &:hover {
      @media (--hoverable) {
        color: var(--hoverTextColor);
        background-color: var(--hoverBgColor);
        border-color: var(--hoverBorderColor);

        .i-icon {
          --color: var(--hoverIconColor);
        }
      }
    }

    .i-icon {
      --size: var(--iconSize);
      --color: var(--iconColor);

      .select.is-open & {
        transform: rotate(-180deg);
      }
    }
  }

  &__current-variant {
    @mixin text-overflow;

    max-width: calc(var(--width) - var(--iconSize) - var(--iconOffsetX) - (var(--paddingX) + var(--borderWidth)) * 2);
  }

  &__dropdown {
    @mixin transition;

    position: absolute;
    z-index: var(--layerControls);
    top: calc(100% + var(--dropdownOffsetY));
    left: 0;
    width: 100%;
    overflow: hidden;
    background-color: var(--dropdownBorderColor);
    border: var(--dropdownBorder);
    border-radius: var(--dropdownBorderRadius);
    box-shadow: var(--dropdownShadow);
    transform-origin: 50% 0;

    .select:not(.is-open) &,
    .select.is-result-empty & {
      @mixin hide;
    }

    .select:not(.is-open) & {
      transform: translateY(calc(var(--dropdownOffsetY) * -1));
    }

    &-list {
      @mixin custom-scrollbar;

      overflow-x: hidden;
      overflow-y: auto;
      max-height: min(var(--dropdownMaxHeight), 75vh);
    }

    &-option {
      @mixin reset-button;
      @mixin transition 0s;

      display: inline-flex;
      align-items: center;
      width: 100%;
      height: var(--optionHeight);
      padding-inline: var(--optionPaddingX);
      font-size: var(--optionFontSize);
      color: var(--optionTextColor);
      background-color: var(--optionBgColor);
      user-select: none;

      &:focus-visible {
        outline: var(--focusOutline);
        outline-offset: -4px;
      }

      &:not(.is-selected) {
        &:hover {
          @media (--hoverable) {
            color: var(--optionHoverTextColor);
            background-color: var(--optionHoverBgColor);
          }
        }
      }

      &.is-selected {
        color: var(--optionSelectedTextColor);
        background-color: var(--optionSelectedBgColor);
      }

      &.is-hidden {
        display: none;
      }
    }
  }

  &__search-input,
  &__search-clear-button {
    z-index: var(--layerTooltip);

    .select:not(.is-open) & {
      @mixin hide;
    }
  }

  &__search-input {
    @mixin abs-cover;

    padding-left: var(--paddingX);
    padding-right: calc(var(--paddingX) * 2 + var(--clearButtonSize) - var(--borderWidth));
    font-family: inherit;
    color: var(--searchTextColor);

    &::placeholder {
      color: var(--searchPlaceholderColor);
    }

    &:not(.is-not-empty) {
      & ~ .select__search-clear-button {
        @mixin hide;
      }
    }
  }

  &__search-clear-button {
    @mixin abs-center-y;
    @mixin reset-button;
    @mixin flex-center;
    @mixin square var(--clearButtonSize);

    position: absolute;
    right: var(--paddingX);
    cursor: pointer;

    &:hover {
      @media (--hoverable) {
        .i-icon {
          --color: var(--clearButtonHoverColor);
        }
      }
    }

    .i-icon {
      --color: var(--clearButtonColor);
    }
  }
}